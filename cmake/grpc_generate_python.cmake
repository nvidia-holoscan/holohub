# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A helper function to generate C++ code from given .proto files.

cmake_minimum_required(VERSION 3.8)
find_package(Threads REQUIRED)

# Output:
# PYSRCS: list of Python source files to be generated by grpc_tools.protoc Python module
# Input:
# PROTO_FILES: list of .proto files that need to be compiled into Python code

function(grpc_generate_python PYSRCS)
  if(NOT ARGN)
    message(SEND_ERROR "Error: grpc_generate_python() called without any .proto files")
    return()
  endif()

  # Create a directory that we copy the proto files to. This path is also used for the -I parameter
  #  and is required to have grpc_tools.protoc generate correct module names (namespaces).
  set(PROTO_DIR_ROOT "${CMAKE_CURRENT_BINARY_DIR}/proto_build")
  set(PROTO_DIR "${PROTO_DIR_ROOT}/holohub/grpc_operators")
  file(MAKE_DIRECTORY ${PROTO_DIR})

  foreach(SOURCE_PROTO_FILE ${ARGN})
    message(STATUS "Build proto file ${SOURCE_PROTO_FILE} in Python")
    # Get the parent directory of the proto file
    get_filename_component(_proto_parent_dir ${SOURCE_PROTO_FILE} DIRECTORY)
    # Get the name of the proto file
    get_filename_component(_proto_filename ${SOURCE_PROTO_FILE} NAME)
    # Get the name of the proto file without extension
    get_filename_component(_proto_name_we ${SOURCE_PROTO_FILE} NAME_WE)
    set(TARGET_PROTO_FILE "${PROTO_DIR}/${_proto_filename}")
    # Copy to build dir
    file(COPY "${SOURCE_PROTO_FILE}" DESTINATION "${PROTO_DIR}")

    # Location to save generated proto files
    set(_generated_dir "${CMAKE_CURRENT_BINARY_DIR}/generated")
    file(MAKE_DIRECTORY ${_generated_dir})

    set(_grpc_py "${_generated_dir}/holohub/grpc_operators/${_proto_name_we}_pb2_grpc.py")
    set(_proto_py "${_generated_dir}/holohub/grpc_operators/${_proto_name_we}_pb2.py")
    set(_proto_pyi "${_generated_dir}/holohub/grpc_operators/${_proto_name_we}_pb2.pyi")

    file(REMOVE "${_grpc_py}" "${_proto_py}" "${_proto_pyi}")
    add_custom_command(
      OUTPUT
        "${_grpc_py}"
        "${_proto_py}"
        "${_proto_pyi}"
      COMMAND python3 -m grpc_tools.protoc
        -I${PROTO_DIR_ROOT}
        --grpc_python_out=${_generated_dir}
        --python_out=${_generated_dir}
        --pyi_out=${_generated_dir}
        ${TARGET_PROTO_FILE}
      COMMENT "Generating gRPC Operators for Python to ${_generated_dir}..."
    )

    list(APPEND ${PYSRCS} "${_grpc_py}")
    list(APPEND ${PYSRCS} "${_proto_py}")
    list(APPEND ${PYSRCS} "${_proto_pyi}")
  endforeach()

  set_source_files_properties(${${PYSRCS}} PROPERTIES GENERATED TRUE)
  set(${PYSRCS} "${${PYSRCS}}" PARENT_SCOPE)
endfunction()
