# SPDX-FileCopyrightText: Copyright (c) 2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

%YAML 1.2
---
# Application configuration
application:
  title: Streaming Client Test App
  version: 1.0
  log_level: INFO

extensions:
  - libgxf_std.so
  - libgxf_cuda.so

data_logging: true

# Source configuration: "replayer" for video file playback, "v4l2" for camera capture
source: "replayer" # Using video file replay instead of camera

# Video replayer configuration
replayer:
  directory: "/workspace/holohub/data/endoscopy"
  basename: "surgical_video"
  frame_rate: 30
  repeat: true
  realtime: true
  count: 0

# V4L2 camera configuration
v4l2_source:
  device: "/dev/video0"        # Camera device path
  width: 640                   # Camera resolution width (widely supported)
  height: 480                  # Camera resolution height
  frame_rate: 30               # Camera frame rate
  pixel_format: "YUYV"         # Pixel format (YUYV 640x480@30fps confirmed supported)
  # Optional camera settings:
  # exposure_time: 100         # Exposure time in multiples of 100Î¼s (e.g. 100 = 10ms)
  # gain: 10                   # Camera gain value

# Format converter configuration - Video replayer outputs RGB888 (3 channels)
format_converter:
  in_dtype: "rgb888"           # Video replayer outputs RGB888 (3 channels)
  out_dtype: "rgb888"          # Keep as RGB888 (3 channels)
  out_tensor_name: tensor
  scale_min: 0.0
  scale_max: 255.0
  out_channel_order: [2, 1, 0] # Convert RGB to BGR for downstream compatibility

basic_console_logger:
  log_inputs: true
  log_outputs: true
  log_metadata: false
  log_tensor_data_content: true
  allowlist_patterns: []
  denylist_patterns: []

simple_text_serializer:
  max_elements: 500

# Streaming client settings
streaming_client:
  # Video/stream parameters - Match video file resolution
  width: 854  # Match video file resolution (854x480)
  height: 480
  fps: 30
  
  # Server connection settings
  server_ip: "127.0.0.1"
  signaling_port: 48010  # Changed back to match server port
  
  # Operation mode - RE-ENABLE SENDING FOR TESTING
  receive_frames: true
  send_frames: true  # Re-enabled to test frame sending with safety measures
  
  # Frame validation (prevents sending empty frames during startup)
  min_non_zero_bytes: 10  # Minimum non-zero bytes required to consider frame valid
  
  # Advanced options
  #timeout_ms: 5000
  #reconnect_attempts: 3
  #buffer_size: 10

# Visualization options 
visualize_frames: true

# HoloViz configuration (used only if visualize_frames is true)
holoviz:
  width: 854  # Match video file resolution
  height: 480
  # Allocator configuration specifically for HoloViz
  allocator:
    block_size: 4194304  # 4MB blocks to handle BGRA frames
    num_blocks: 8
  tensors:
    - name: "bgra_tensor"
      type: color
      image_format: "b8g8r8a8_unorm"  # BGRA format (4 channels) matches streaming client output
      opacity: 1.0
      priority: 0

# Buffer pool configuration to fix GXF_EXCEEDING_PREALLOCATED_SIZE errors
# Increases buffer size to accommodate BGR->BGRA conversion (921600 -> 1228800 bytes)
allocator:
  block_size: 4194304    # 4MB buffer blocks (much larger than 1228800 bytes needed for BGRA frames)
  num_blocks: 12         # Increased number of pre-allocated blocks for smooth streaming

# Additional buffer configuration for specific components
double_buffer_transmitter:
  capacity: 4            # Increase transmitter buffer capacity
  policy: 2              # Drop oldest policy

double_buffer_receiver:
  capacity: 4            # Increase receiver buffer capacity
  policy: 2              # Drop oldest policy

# Optional scheduler configuration
# Use one of: "default", "multi_thread", "event_based", "greedy"
scheduler: "greedy"

# Multi-thread scheduler configuration (if using it)
multi_thread_scheduler:
  worker_thread_number: 4
  stop_on_deadlock: false
  stop_on_deadlock_timeout: 1000

# Event-based scheduler configuration (if using it)
event_based_scheduler:
  stop_on_deadlock: false
  stop_on_deadlock_timeout: 1000

# Greedy scheduler configuration (if using custom parameters)
greedy_scheduler:
  max_duration_ms: 1000

# Enable data flow tracking for debugging/profiling
tracking: false 