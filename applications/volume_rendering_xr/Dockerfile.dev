# syntax=docker/dockerfile:1

# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

############################################################
# Versions
############################################################
ARG VULKAN_SDK_VERSION=1.3.216.0
ARG CUDA_TOOLKIT_VERSION=11.6

ARG BASE_IMAGE=holohub:openxr-base
FROM ${BASE_IMAGE} as base

# Install cmake, ninja, git and build-essential
RUN apt update \
    && apt install --no-install-recommends -y ca-certificates gpg wget curl \
    && curl -s -L https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
        | gpg --dearmor - \
        | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null \
    && echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' \
        | tee /etc/apt/sources.list.d/kitware.list >/dev/null \
    && apt update \
    && apt install --no-install-recommends -y \
        kitware-archive-keyring \
        cmake-data="3.22.2-*" \
        cmake="3.22.2-*" \
        ninja-build="1.10.0-*" \
        git \
        build-essential \
    && rm -rf /var/lib/apt/lists/*
ENV CMAKE_GENERATOR=Ninja

############################################################
# Vulkan SDK
#
# Use the SDK because we need the newer Vulkan headers and the newer shader compiler than provided
# by the Ubuntu deb packages. These are compile time dependencies, we still use the Vulkan loaded
# and the Vulkan validation layer as runtime components provided by Ubuntu packages because that's
# what the user will have on their installations.
############################################################
FROM base as vulkansdk-builder
ARG VULKAN_SDK_VERSION

WORKDIR /opt/vulkansdk

# Note there is no aarch64 binary version to download, therefore for aarch64 we also download the x86_64 version which
# includes the source. Then remove the binaries and build the aarch64 version from source.
RUN wget -nv --show-progress --progress=bar:force:noscroll \
    https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION}/linux/vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz
RUN tar -xzf vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz
RUN if [ $(uname -m) = "aarch64" ]; then \
    apt update \
    && apt install --no-install-recommends -y python-is-python3 python3-distutils \
    && rm -rf /var/lib/apt/lists/* \
    && cd ${VULKAN_SDK_VERSION} \
    && rm -rf x86_64 \
    && MAKEFLAGS="-j $(nproc)" \
    && unset CMAKE_GENERATOR \
    && ./vulkansdk shaderc glslang headers; \
    fi

FROM base as dev

ARG DEBIAN_FRONTEND=noninteractive
ARG CUDA_TOOLKIT_VERSION

# Install OpenXR dev dependencies, can remove when using libopenxr-dev package instead of building OpenXR from source
RUN apt update \
    && apt install --no-install-recommends -y \
        libgl1-mesa-dev \
        libx11-xcb-dev \
        libxcb-dri2-0-dev \
        libxcb-glx0-dev \
        libxcb-icccm4-dev \
        libxcb-keysyms1-dev \
        libxcb-randr0-dev \
        libxrandr-dev \
        libxxf86vm-dev \
        mesa-common-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy vulkan sdk
# NOTE: It's all in x86_64 even if that's not the target platform
# (Vulkan SDK cmake scripting issue)
ARG VULKAN_SDK_VERSION
ENV VULKAN_SDK=/opt/vulkansdk/${VULKAN_SDK_VERSION}
COPY --from=vulkansdk-builder ${VULKAN_SDK}/x86_64/ ${VULKAN_SDK}
# We need to use the headers and shader compiler of the SDK but want to link against the
# Vulkan loader provided by the Ubuntu package. Therefore create a link in the SDK directory
# pointing to the system Vulkan loader library.
RUN rm -f ${VULKAN_SDK}/lib/libvulkan.so* \
    && ln -s /lib/$(uname -m)-linux-gnu/libvulkan.so.1 ${VULKAN_SDK}/lib/libvulkan.so
ENV PATH="${PATH}:${VULKAN_SDK}/bin"
ENV CMAKE_PREFIX_PATH="${CMAKE_PREFIX_PATH}:${VULKAN_SDK}"

ENTRYPOINT ["/workspace/holohub/applications/volume_rendering_xr/scripts/dev-entrypoint.sh"]
