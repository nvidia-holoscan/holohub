# syntax=docker/dockerfile:1

# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG BASE_IMAGE
FROM ${BASE_IMAGE} as base

ARG WINDRUNNER_VERSION=1.9.194-6b93ea0-1~20240216ubuntu2004
ARG DEBIAN_FRONTEND=noninteractive

# Install Monado OpenXR runtime. See
# https://monado.freedesktop.org/getting-started.html#monado-installation
# Added workaround (sysctl) for hanging in 'apt update' or `add-apt-repository` because
# IPV6 server not working. Seen on AGX but working on x86 Desktop.
RUN apt update \
    && apt install --no-install-recommends -y software-properties-common \
    && PREV_VALUE=$(sysctl net.ipv6.conf.all.disable_ipv6 | tr -d ' ') \
    && sysctl net.ipv6.conf.all.disable_ipv6=1 \
    && add-apt-repository ppa:monado-xr/monado \
    && sysctl ${PREV_VALUE} \
    && apt update \
    && apt install --no-install-recommends -y \
        libopenxr-loader1 libopenxr-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Magic Leap OpenXR runtime and set it as the default active runtime
COPY applications/volume_rendering_xr/thirdparty/magicleap/MagicLeapRemoteRendering.gpg \
    /usr/local/share/keyrings/magicleap/MagicLeapRemoteRendering.gpg
RUN LIST_FILE=/etc/apt/sources.list.d/MagicLeapRemoteRendering.list \
    && chmod -R 755 "/usr/local/share/keyrings/magicleap/" \
    && CODENAME=$(. /etc/os-release && echo "$VERSION_CODENAME") \
    && echo "deb [signed-by=/usr/local/share/keyrings/magicleap/MagicLeapRemoteRendering.gpg] https://apt.magicleap.cloud/Stable/ $CODENAME main" \
        | tee "$LIST_FILE" \
    && chmod a+r "$LIST_FILE" \
    && apt update \
    && echo "debconf-set-selections windrunner/accept_eula boolean true" | debconf-set-selections \
    && apt install --no-install-recommends -y net-tools windrunner-service=${WINDRUNNER_VERSION} libopenxr1-windrunner=${WINDRUNNER_VERSION} libnvidia-compute-510- libnvidia-encode-510- \
    && printf '\
Package: windrunner-service\n\
Pin: version %s\n\
Pin-Priority: 1337\n\
\n\
Package: libopenxr1-windrunner\n\
Pin: version %s\n\
Pin-Priority: 1337\n' ${WINDRUNNER_VERSION} ${WINDRUNNER_VERSION} > /etc/apt/preferences.d/pin-windrunner \
    && update-alternatives --set openxr1-active-runtime /usr/share/openxr/1/openxr_windrunner.json

ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/windrunner/lib"
ENV LR_TRANSPORT_CERT_PATH=/opt/windrunner/share/windrunner/server.crt
ENV LR_TRANSPORT_PKEY_PATH=/opt/windrunner/share/windrunner/server.key
ENV WINDRUNNER_ENABLE_AUDIO=0
ENV PATH="${PATH}:/opt/windrunner/bin"

# setup Magic Leap CLI
ENV PATH="${PATH}:/workspace/holoscan-openxr/thirdparty/magicleap"

# Install Vulkan dependencies
#  libvulkan1 - Vulkan loader
#  libegl1 - to run headless Vulkan apps
RUN apt update \
    && apt install --no-install-recommends -y \
        libvulkan1 \
        libegl1 \
    && rm -rf /var/lib/apt/lists/*

# Set JIT compilation cache paths
#  https://developer.nvidia.com/blog/cuda-pro-tip-understand-fat-binaries-jit-caching/
ENV CUDA_CACHE_DISABLE="0"
ENV CUDA_CACHE_PATH="/workspace/holoscan-openxr/.cache/ComputeCache"
#  https://raytracing-docs.nvidia.com/optix7/api/optix__host_8h.html#a59a60f5f600df0f9321b0a0b1090d76b
ENV OPTIX_CACHE_PATH="/workspace/holoscan-openxr/.cache/OptixCache"
#  https://download.nvidia.com/XFree86/Linux-x86_64/460.67/README/openglenvvariables.html
ENV __GL_SHADER_DISK_CACHE_PATH="/workspace/holoscan-openxr/.cache/GLCache"

# all NVIDIA devices are visible, also use all driver capabilities
ENV NVIDIA_VISIBLE_DEVICES="all"
ENV NVIDIA_DRIVER_CAPABILITIES="all"
