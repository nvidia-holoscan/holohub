// For format details, see https://aka.ms/vscode-remote/devcontainer.json or
// https://code.visualstudio.com/docs/remote/devcontainerjson-reference
{
    "name": "C++",
    "build": {
        "dockerfile": "../applications/volume_rendering_xr/Dockerfile",
        "target": "dev",
        "context": "..",
        "args": {
            "BUILDKIT_INLINE_CACHE": "1" // Enable Docker BuildKit cache
        }
    },
    "runArgs": [
        "--runtime=nvidia",
        "--net=host",
        "--cap-add=SYS_PTRACE",
        "--security-opt=seccomp=unconfined"
    ],
    "containerEnv": {
        "DISPLAY": "${localEnv:DISPLAY}",
        // Set JIT compilation cache paths
        //  https://developer.nvidia.com/blog/cuda-pro-tip-understand-fat-binaries-jit-caching/
        "CUDA_CACHE_PATH": "${containerWorkspaceFolder}/.cache/ComputeCache",
        //  https://raytracing-docs.nvidia.com/optix7/api/optix__host_8h.html#a59a60f5f600df0f9321b0a0b1090d76b
        "OPTIX_CACHE_PATH": "${containerWorkspaceFolder}/.cache/OptixCache",
        //  https://download.nvidia.com/XFree86/Linux-x86_64/460.67/README/openglenvvariables.html
        "__GL_SHADER_DISK_CACHE_PATH": "${containerWorkspaceFolder}/.cache/GLCache"
    },
    "mounts": [
        "source=/tmp/.X11-unix,target=/tmp/.X11-unix,type=bind",
        // Mount Vulkan driver ICD configuration.
        "source=/usr/share/vulkan/icd.d/nvidia_icd.json,target=/usr/share/vulkan/icd.d/nvidia_icd.json,type=bind",
        // Mount ssh keys to container to be able to use the internal NVIDIA git repo
        "source=${localEnv:HOME}${localEnv:USERPROFILE}/.ssh,target=/home/holoscan-openxr/.ssh,type=bind",
        "source=/lib/aarch64-linux-gnu/nvoptix.bin,target=/lib/aarch64-linux-gnu/nvoptix.bin,type=bind",

    ],
    "workspaceFolder": "/workspace/holoscan-openxr",
    "workspaceMount": "source=${localWorkspaceFolder},target=${containerWorkspaceFolder},type=bind",
    // Configure tool-specific properties.
    "customizations": {
        // Configure properties specific to VS Code.
        "vscode": {
            // Set *default* container specific settings.json values on container create.
            "settings": {
                "testMate.cpp.test.advancedExecutables": [
                    {
                        "name": "${filename}",
                        "description": "${relDirpath}/",
                        "pattern": "${command:cmake.buildDirectory}/applications/volume_rendering_xr/**/*{test,Test,TEST}*",
                        "cwd": "${command:cmake.buildDirectory}"
                    },
                ],
            },
            // Add the IDs of extensions you want installed when the container is created.
            "extensions": [
                "akiramiyakoda.cppincludeguard",
                "ms-vscode.cpptools-extension-pack",
                "matepek.vscode-catch2-test-adapter",
                "ms-vscode.makefile-tools",
                "shardulm94.trailing-spaces",
                "stkb.rewrap",
                "shd101wyy.markdown-preview-enhanced"
            ]
        }
    },
    "initializeCommand": "${localWorkspaceFolder}/applications/volume_rendering_xr/thirdparty/magicleap.sh",
    // Use 'forwardPorts' to make a list of ports inside the container available locally.
    // "forwardPorts": [],
    // Use 'postCreateCommand' to run commands after the container is created.
    // "postCreateCommand": "gcc -v",
    // Comment out this line to run as root instead.
    "remoteUser": "holoscan-openxr"
}
