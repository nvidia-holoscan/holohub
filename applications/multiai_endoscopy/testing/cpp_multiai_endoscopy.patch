--- applications/multiai_endoscopy/cpp/post-proc-cpu/multi_ai.cpp	2024-01-10 18:43:58.365526539 +0000
+++ applications/multiai_endoscopy/cpp/post-proc-cpu/multi_ai_test.cpp	2024-02-28 09:17:11.116207162 +0000
@@ -20,5 +20,6 @@
 #include <holoscan/holoscan.hpp>
 #include <holoscan/operators/video_stream_replayer/video_stream_replayer.hpp>
+#include <holoscan/operators/video_stream_recorder/video_stream_recorder.hpp>
 #include <holoscan/operators/format_converter/format_converter.hpp>
 #include <holoscan/operators/inference/inference.hpp>
 #include <holoscan/operators/segmentation_postprocessor/segmentation_postprocessor.hpp>
@@ -367,6 +368,24 @@
     add_flow(segmentation_preprocessor, inference, {{"", "receivers"}});
     add_flow(inference, segmentation_postprocessor, {{"transmitter", ""}});
     add_flow(segmentation_postprocessor, holoviz, {{"", "receivers"}});
+
+    auto recorder_format_converter = make_operator<ops::FormatConverterOp>(
+        "recorder_format_converter",
+        Arg("in_dtype", std::string("rgba8888")),
+        Arg("out_dtype", std::string("rgb888")),
+        Arg("pool", make_resource<UnboundedAllocator>("pool")));
+
+    auto recorder = make_operator<ops::VideoStreamRecorderOp>(
+        "recorder",
+        Arg("directory", std::string("RECORDING_DIR")),
+        Arg("basename", std::string("SOURCE_VIDEO_BASENAME")));
+
+    add_flow(holoviz, recorder_format_converter, {{"render_buffer_output", "source_video"}});
+    add_flow(recorder_format_converter, recorder);
+
+    holoviz->add_arg(Arg("enable_render_buffer_output", true));
+    holoviz->add_arg(Arg("allocator", make_resource<UnboundedAllocator>("allocator")));
+
   }
 
  private:
