--- ../applications/multiai_endoscopy/python/multi_ai.py	2024-03-13 19:09:20.333021544 +0000
+++ ../applications/multiai_endoscopy/python/multi_ai_copy.py	2024-03-13 19:47:30.422716182 +0000
@@ -19,7 +19,7 @@
 
 import cupy as cp
 import numpy as np
-from holoscan.core import Application, Operator, OperatorSpec
+from holoscan.core import Application, Operator, OperatorSpec, kwargs_to_arglist
 from holoscan.operators import (
     AJASourceOp,
     FormatConverterOp,
@@ -27,6 +27,7 @@
     InferenceOp,
     SegmentationPostprocessorOp,
     VideoStreamReplayerOp,
+    VideoStreamRecorderOp,
 )
 from holoscan.resources import UnboundedAllocator
 
@@ -250,7 +251,8 @@
             )
 
         holoviz = HolovizOp(
-            self, allocator=pool, name="holoviz", tensors=holoviz_tensors, **self.kwargs("holoviz")
+            self, allocator=pool, name="holoviz", tensors=holoviz_tensors, **self.kwargs("holoviz"),
+            enable_render_buffer_output=True
         )
 
         # connect the input each pre-processor
@@ -275,6 +277,26 @@
         self.add_flow(detection_postprocessor, holoviz, {("out", "receivers")})
         self.add_flow(segmentation_postprocessor, holoviz, {("", "receivers")})
 
+        recorder_format_converter = FormatConverterOp(
+            self,
+            name="recorder_format_converter",
+            in_dtype="rgba8888",
+            out_dtype="rgb888",
+            pool=UnboundedAllocator(self, name="pool")
+        )
+        recorder = VideoStreamRecorderOp(
+            self,
+            name="recorder",
+            directory="/workspace/holohub/build/applications/multiai_endoscopy/python/recording_output",
+            basename="python_multiai_endoscopy_output",
+            flush_on_tick=True
+        )
+
+        holoviz.add_arg(kwargs_to_arglist(allocator=UnboundedAllocator(self, name="allocator")))
+
+        self.add_flow(holoviz, recorder_format_converter, {("render_buffer_output", "source_video")})
+        self.add_flow(recorder_format_converter, recorder)
+
 
 if __name__ == "__main__":
     parser = ArgumentParser(description="Multi-AI Detection Segmentation application.")
